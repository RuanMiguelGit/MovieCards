{"version":3,"sources":["components/Header.jsx","components/AddMovie.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","AddMovie","props","state","title","subtitle","imagePath","storyline","rating","genre","handleChange","bind","handleAdd","event","this","setState","target","name","value","preventDefault","onClick","data-testid","htmlFor","id","type","onChange","inputTitle","inputSubtitle","inputImagePath","inputStoryline","inputRating","inputGenre","inputButton","Rating","MovieCard","movie","alt","src","MovieList","movies","map","key","SearchBar","searchText","onSearchTextChange","bookmarkedOnly","onBookmarkedChange","checked","selectedGenre","onSelectedGenreChange","InputText","InputBookmark","InputSelect","MovieLibrary","onAddItem","searchOn","newMovie","film","newItem","newItems","searchFor","filter","bookmarked","includes","App","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9d8a73e0.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: '',\n      subtitle: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleAdd = this.handleAdd.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      [event.target.name]: event.target.value,\n    });\n  }\n\n  handleAdd(event) {\n    event.preventDefault();\n    const { onClick } = this.props;\n    onClick(this.state);\n    this.setState({\n      title: '',\n      subtitle: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n\n  inputTitle() {\n    const { title } = this.state;\n    return (\n      <label data-testid=\"title-input-label\" htmlFor=\"title-input\">\n        Título\n        <input\n          id=\"title-input\"\n          name=\"title\"\n          type=\"textarea\"\n          data-testid=\"title-input\"\n          value={ title }\n          onChange={ this.handleChange }\n        />\n      </label>\n\n    );\n  }\n\n  inputSubtitle() {\n    const { subtitle } = this.state;\n    return (\n      <label data-testid=\"subtitle-input-label\" htmlFor=\"subtitle-input\">\n        Subtítulo\n        <input\n          id=\"subtitle-input\"\n          name=\"subtitle\"\n          type=\"textarea\"\n          data-testid=\"subtitle-input\"\n          value={ subtitle }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  inputImagePath() {\n    const { imagePath } = this.state;\n    return (\n      <label data-testid=\"image-input-label\" htmlFor=\"image-input\">\n        Imagem\n        <input\n          id=\"image-input\"\n          name=\"imagePath\"\n          type=\"textarea\"\n          data-testid=\"image-input\"\n          value={ imagePath }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  inputStoryline() {\n    const { storyline } = this.state;\n    return (\n      <label data-testid=\"storyline-input-label\" htmlFor=\"image-input\">\n        Sinopse\n        <textarea\n          id=\"image-input\"\n          name=\"storyline\"\n          data-testid=\"storyline-input\"\n          value={ storyline }\n          onChange={ this.handleChange }\n        />\n      </label>);\n  }\n\n  inputRating() {\n    const { rating } = this.state;\n    return (\n      <label data-testid=\"rating-input-label\" htmlFor=\"rating-input\">\n        Avaliação\n        <input\n          id=\"rating-input\"\n          name=\"rating\"\n          type=\"number\"\n          data-testid=\"rating-input\"\n          value={ rating }\n          onChange={ this.handleChange }\n        />\n      </label>\n    );\n  }\n\n  inputGenre() {\n    const { genre } = this.state;\n    return (\n      <label data-testid=\"genre-input-label\" htmlFor=\"genre-input\">\n        Gênero\n        <select\n          id=\"genre-input\"\n          data-testid=\"genre-input\"\n          value={ genre }\n          onChange={ this.handleChange }\n          name=\"genre\"\n        >\n          <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  inputButton() {\n    return (\n      <button\n        type=\"submit\"\n        data-testid=\"send-button\"\n        onClick={ this.handleAdd }\n      >\n        Adicionar filme\n      </button>\n    );\n  }\n\n  render() {\n    return (\n      <form data-testid=\"add-movie-form\">\n        {this.inputTitle()}\n        {this.inputSubtitle()}\n        {this.inputImagePath()}\n        {this.inputStoryline()}\n        {this.inputRating()}\n        {this.inputGenre()}\n        {this.inputButton()}\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default AddMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nRating.propTypes = { rating: PropTypes.number.isRequired };\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img alt=\"Movie Cover\" className=\"movie-card-image\" src={ imagePath } />\n        <div className=\"movie-card-body\">\n          <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <Rating rating={ rating } />\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = {\n  movies: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    map: PropTypes.func.isRequired,\n  }).isRequired,\n};\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  InputText() {\n    const { searchText, onSearchTextChange } = this.props;\n    return (\n      <label htmlFor=\"text-input\" data-testid=\"text-input-label\">\n        Inclui o texto:\n        <input\n          type=\"text\"\n          id=\"text-input\"\n          name=\"text-input\"\n          value={ searchText }\n          onChange={ onSearchTextChange }\n          data-testid=\"text-input\"\n        />\n      </label>\n    );\n  }\n\n  InputBookmark() {\n    const { bookmarkedOnly, onBookmarkedChange } = this.props;\n    return (\n      <label htmlFor=\" bookmark-checked\" data-testid=\"checkbox-input-label\">\n        Mostrar somente favoritos\n        <input\n          name=\"bookmark-checked\"\n          id=\"bookmark-checked\"\n          type=\"checkbox\"\n          checked={ bookmarkedOnly }\n          onChange={ onBookmarkedChange }\n          data-testid=\"checkbox-input\"\n        />\n      </label>\n    );\n  }\n\n  InputSelect() {\n    const { selectedGenre, onSelectedGenreChange } = this.props;\n    return (\n      <label data-testid=\"select-input-label\" htmlFor=\"select-input\">\n        Filtrar por gênero\n        <select\n          id=\"select-input\"\n          name=\"select\"\n          value={ selectedGenre }\n          onChange={ onSelectedGenreChange }\n          data-testid=\"select-input\"\n        >\n          <option value=\"\" data-testid=\"select-option\">Todos</option>\n          <option value=\"action\" data-testid=\"select-option\">Ação</option>\n          <option value=\"comedy\" data-testid=\"select-option\">Comédia</option>\n          <option value=\"thriller\" data-testid=\"select-option\">Suspense</option>\n        </select>\n      </label>\n    );\n  }\n\n  render() {\n    return (\n      <form data-testid=\"search-bar-form\">\n\n        {this.InputText()}\n        {this.InputBookmark()}\n        {this.InputSelect()}\n\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.string.isRequired,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.bool.isRequired,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.string.isRequired,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport AddMovie from './AddMovie';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: props.movies,\n    };\n    this.onAddItem = this.onAddItem.bind(this);\n    this.onSearchTextChange = this.onSearchTextChange.bind(this);\n    this.onBookmarkedChange = this.onBookmarkedChange.bind(this);\n    this.onSelectedGenreChange = this.onSelectedGenreChange.bind(this);\n    this.onSelectedGenreChange = this.onSelectedGenreChange.bind(this);\n    this.searchOn = this.searchOn.bind(this);\n  }\n\n  onAddItem(newMovie) {\n    const { movies } = this.state;\n    const film = movies\n    const newItem = newMovie;\n    const newItems = [...film, newItem];\n    this.setState({\n      movies: newItems,\n    });\n  }\n\n  onSearchTextChange(event) {\n    this.setState({\n      searchText: event.target.value,\n    });\n  }\n\n  onBookmarkedChange(event) {\n    const { target } = event;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n\n    this.setState({\n      bookmarkedOnly: value,\n    });\n  }\n\n  onSelectedGenreChange(event) {\n    this.setState({\n      selectedGenre: event.target.value,\n    });\n  }\n\n  searchOn() {\n    let searchFor;\n    const { movies } = this.props;\n    const { bookmarkedOnly, selectedGenre, searchText } = this.state;\n\n    if (selectedGenre !== '') {\n      searchFor = movies.filter((movie) => movie.genre === selectedGenre);\n    } else if (selectedGenre === '') {\n      searchFor = movies;\n    }\n    if (bookmarkedOnly === true) {\n      searchFor = movies.filter((film) => film.bookmarked === true);\n    }\n    if (searchText !== '') {\n      searchFor = movies.filter((movie) => movie.title.includes(searchText)\n       || movie.subtitle.includes(searchText) || movie.storyline.includes(searchText));\n    }\n    return searchFor;\n  }\n\n  render() {\n    const { searchText, bookmarkedOnly, selectedGenre } = this.state;\n    return (\n      <div>\n        <MovieList movies={ this.searchOn() } />\n        <SearchBar\n          searchText={ searchText }\n          onSearchTextChange={ this.onSearchTextChange }\n          bookmarkedOnly={ bookmarkedOnly }\n          onBookmarkedChange={ this.onBookmarkedChange }\n          selectedGenre={ selectedGenre }\n          onSelectedGenreChange={ this.onSelectedGenreChange }\n        />\n        <AddMovie onClick={ this.onAddItem } />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport MovieLibrary from './components/MovieLibrary';\nimport data from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={ data } />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}